#!/usr/bin/python

import time
import random
import xxhash
import hashlib
import binascii

import cffi
import xhash

xhash64  = xhash.lib.xhash64

# NOTE: SINGLE THREAD ONLY
_xhash_buff128 = cffi.FFI().new('unsigned char [16]')
_xhash_buff256 = cffi.FFI().new('unsigned char [32]')

def xhash128 (v):
    xhash.lib.xhash128(v, len(v), _xhash_buff128)
    return bytes(_xhash_buff128)

def xhash256 (v):
    xhash.lib.xhash256(v, len(v), _xhash_buff256)
    return bytes(_xhash_buff256)

if False:
    # DEVELOPMENT

    coisa = b''.join((
        random.randint(0, (1 << 64) - 1).to_bytes(byteorder='little', length=8, signed=False),
        random.randint(0, (1 << 64) - 1).to_bytes(byteorder='little', length=8, signed=False),
        random.randint(0, (1 << 64) - 1).to_bytes(byteorder='little', length=8, signed=False),
        random.randint(0, (1 << 64) - 1).to_bytes(byteorder='little', length=8, signed=False),
        random.randint(0, (1 << 64) - 1).to_bytes(byteorder='little', length=8, signed=False),
        random.randint(0, (1 << 64) - 1).to_bytes(byteorder='little', length=8, signed=False),
        random.randint(0, (1 << 64) - 1).to_bytes(byteorder='little', length=8, signed=False),
        random.randint(0, (1 << 64) - 1).to_bytes(byteorder='little', length=8, signed=False),
        random.randint(0, (1 << 64) - 1).to_bytes(byteorder='little', length=8, signed=False),
        random.randint(0, (1 << 64) - 1).to_bytes(byteorder='little', length=8, signed=False),
        random.randint(0, (1 << 64) - 1).to_bytes(byteorder='little', length=8, signed=False),
        random.randint(0, (1 << 64) - 1).to_bytes(byteorder='little', length=8, signed=False),
        random.randint(0, (1 << 64) - 1).to_bytes(byteorder='little', length=8, signed=False),
        random.randint(0, (1 << 64) - 1).to_bytes(byteorder='little', length=8, signed=False),
        random.randint(0, (1 << 64) - 1).to_bytes(byteorder='little', length=8, signed=False),
        random.randint(0, (1 << 64) - 1).to_bytes(byteorder='little', length=8, signed=False),
    ))

    # GENERATE TEST
    for i in range(100):
        csum = xhash64(coisa, 4 + i)
        print('assert 0x%016X == xhash(' % csum, coisa[:5+i], ',', 5+i, ')')

    # SHOW A SAMPLE
    for i in range(16):
        print(i, '0x%016X' % xhash64(b'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ', 3 + i))
        print(i, '0x%016X' % xhash64(b'0123556789ABCDEFGHIJKLMNOPQRSTUVWXYZ', 3 + i))

    for i in range(16):
        print(i, binascii.hexlify(xhash128(b'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'[:3 + i]), sep=' ', bytes_per_sep=8).upper().decode())
        print(i, binascii.hexlify(xhash128(b'0123556789ABCDEFGHIJKLMNOPQRSTUVWXYZ'[:3 + i]), sep=' ', bytes_per_sep=8).upper().decode())

else:
    # PRODUCTION

    #
    assert xhash64(b'', 0) == 0

    # TEST
    assert 0x8ECFF08574A376F6 == xhash( b'@\xf6i:M' , 5 )
    assert 0xC65F6EDF8693DDF6 == xhash( b'@\xf6i:M\xd7' , 6 )
    assert 0xF7C8A60669BDA16E == xhash( b'@\xf6i:M\xd7\x80' , 7 )
    assert 0x8E72AB6DF095A205 == xhash( b'@\xf6i:M\xd7\x80\xe4' , 8 )
    assert 0x3C51C8386750AC33 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c' , 9 )
    assert 0xE7709C26E347F045 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1' , 10 )
    assert 0x36C1C33CC0ED3A15 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9e' , 11 )
    assert 0x4714084ACB914634 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep' , 12 )
    assert 0xDE3B9E85D6170D55 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab' , 13 )
    assert 0x5EA1112033FDC0B9 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5' , 14 )
    assert 0x37E295BC3E88BBA2 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17' , 15 )
    assert 0xD1091AD2A54A5C79 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9' , 16 )
    assert 0x771493BC6E064701 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e' , 17 )
    assert 0x7AB949EFFEC9F323 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b' , 18 )
    assert 0x2966AE2B4E12A698 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97' , 19 )
    assert 0x872C2C502BD5E6AB == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97i' , 20 )
    assert 0x8037D938AAA7D624 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id' , 21 )
    assert 0x2D32E271CE2B26DD == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b' , 22 )
    assert 0x701AD30E005D3768 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6' , 23 )
    assert 0xF8EFF9138CC99F80 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?' , 24 )
    assert 0xA9D6323334061A53 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5' , 25 )
    assert 0xC3D5CDFC8C1E2641 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T' , 26 )
    assert 0x8C2114C96970755B == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2' , 27 )
    assert 0x8AD9905ECD59A0C7 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1' , 28 )
    assert 0x0CA6F9A47ECBBBCB == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d' , 29 )
    assert 0x49307ED938F0DE05 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc' , 30 )
    assert 0xAF61C7F587F490A6 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb' , 31 )
    assert 0x89D727FF0B577EDA == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2' , 32 )
    assert 0xBF64ED12A4BEC825 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8' , 33 )
    assert 0xB12AAD61052ABA4F == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff' , 34 )
    assert 0xAC057C0CBE5FE442 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80' , 35 )
    assert 0x3CC1C95B4248FCAE == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94' , 36 )
    assert 0x3528D07612BE9D12 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2' , 37 )
    assert 0x2BB77B0EFAA489AB == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<' , 38 )
    assert 0xA8E88F295F8BAC29 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97' , 39 )
    assert 0xA251BCC510FFC61C == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t' , 40 )
    assert 0xC190270AD3B7047F == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5' , 41 )
    assert 0x00BBFDEDB9356A4C == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3' , 42 )
    assert 0x680D9FE97D155C71 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89' , 43 )
    assert 0x7460411F1A5626D8 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89G' , 44 )
    assert 0x481AD3FF6FB47632 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp' , 45 )
    assert 0x5461EE46D87502B9 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0' , 46 )
    assert 0xBC871D168040AF2A == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf' , 47 )
    assert 0xE6B2B5ECE81D3D60 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8' , 48 )
    assert 0x841C399AF544887A == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe6' , 49 )
    assert 0x4532AD5964DB2FF8 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60' , 50 )
    assert 0x9EFD3BBD4543AAE4 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4' , 51 )
    assert 0xB8B6233D37D15108 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab' , 52 )
    assert 0xC4FD410380360207 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84' , 53 )
    assert 0x418630021BC936C2 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84L' , 54 )
    assert 0xB476634E366FEBF7 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LA' , 55 )
    assert 0xE0C5F48DBE3FE322 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR' , 56 )
    assert 0x32998F9AA6213AB2 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4' , 57 )
    assert 0x439BB6C9BE4521CB == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D' , 58 )
    assert 0x7CCBDC27EB258153 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98' , 59 )
    assert 0x7927CC7CFE014601 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8' , 60 )
    assert 0x1C228165DB6EFF3D == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8' , 61 )
    assert 0x848C693226B822A8 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c' , 62 )
    assert 0xE33CEF65CAA0CDA1 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16' , 63 )
    assert 0xF8A8608999A06C68 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2' , 64 )
    assert 0xD538D30979FBEC25 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xff' , 65 )
    assert 0x9B4772B47F9180DD == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe' , 66 )
    assert 0x521B5953743ADA05 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb' , 67 )
    assert 0x4072BEEAD9BAA140 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0' , 68 )
    assert 0x2EBD0708E996C4B6 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9' , 69 )
    assert 0x42220144A65B5C59 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{' , 70 )
    assert 0xD8827F6F6414E62C == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r' , 71 )
    assert 0x9AFA8879E557194F == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc' , 72 )
    assert 0x285BFA9C450DADEA == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc#' , 73 )
    assert 0x960474B3B3C11C45 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc#Y' , 74 )
    assert 0x0021CC6D485AE1E8 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc#Y.' , 75 )
    assert 0xF14597944AA73429 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc#Y.\xc9' , 76 )
    assert 0x8198DB86F5CDE14B == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc#Y.\xc9l' , 77 )
    assert 0xBD0E41E295C9DCB3 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc#Y.\xc9l\x0e' , 78 )
    assert 0x323C9245EE282A97 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc#Y.\xc9l\x0e\xe2' , 79 )
    assert 0xE22814E184C8E2C9 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc#Y.\xc9l\x0e\xe2u' , 80 )
    assert 0x41757A35F1158D16 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc#Y.\xc9l\x0e\xe2u]' , 81 )
    assert 0xA329D50D030CA92C == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc#Y.\xc9l\x0e\xe2u]\xfc' , 82 )
    assert 0x83C95539A2261179 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc#Y.\xc9l\x0e\xe2u]\xfc\xe8' , 83 )
    assert 0xE69985BEA6D3711E == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc#Y.\xc9l\x0e\xe2u]\xfc\xe8a' , 84 )
    assert 0xDE325DF98FF124D7 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc#Y.\xc9l\x0e\xe2u]\xfc\xe8a\xce' , 85 )
    assert 0x88357ADE5E6DA111 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc#Y.\xc9l\x0e\xe2u]\xfc\xe8a\xce,' , 86 )
    assert 0x3B3B6172963B36A2 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc#Y.\xc9l\x0e\xe2u]\xfc\xe8a\xce,\xd9' , 87 )
    assert 0x39988E93C966A874 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc#Y.\xc9l\x0e\xe2u]\xfc\xe8a\xce,\xd9m' , 88 )
    assert 0x57D89C0B47DD6FF3 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc#Y.\xc9l\x0e\xe2u]\xfc\xe8a\xce,\xd9mF' , 89 )
    assert 0xE2AA6015E7BCDF3E == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc#Y.\xc9l\x0e\xe2u]\xfc\xe8a\xce,\xd9mF\x1d' , 90 )
    assert 0xE4085D227D308CE7 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc#Y.\xc9l\x0e\xe2u]\xfc\xe8a\xce,\xd9mF\x1d\x86' , 91 )
    assert 0x8DCB604B5568772D == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc#Y.\xc9l\x0e\xe2u]\xfc\xe8a\xce,\xd9mF\x1d\x86G' , 92 )
    assert 0x8F6E52111E08ECDD == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc#Y.\xc9l\x0e\xe2u]\xfc\xe8a\xce,\xd9mF\x1d\x86G\xbf' , 93 )
    assert 0x142797D34A1585E4 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc#Y.\xc9l\x0e\xe2u]\xfc\xe8a\xce,\xd9mF\x1d\x86G\xbf\xf1' , 94 )
    assert 0x8FFF32A20DE86576 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc#Y.\xc9l\x0e\xe2u]\xfc\xe8a\xce,\xd9mF\x1d\x86G\xbf\xf1\x8c' , 95 )
    assert 0x0F4601147B19962D == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc#Y.\xc9l\x0e\xe2u]\xfc\xe8a\xce,\xd9mF\x1d\x86G\xbf\xf1\x8c]' , 96 )
    assert 0xA9DBA839679D077C == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc#Y.\xc9l\x0e\xe2u]\xfc\xe8a\xce,\xd9mF\x1d\x86G\xbf\xf1\x8c]I' , 97 )
    assert 0x035245E5BB75102F == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc#Y.\xc9l\x0e\xe2u]\xfc\xe8a\xce,\xd9mF\x1d\x86G\xbf\xf1\x8c]I\x98' , 98 )
    assert 0xA68F964546B6F16D == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc#Y.\xc9l\x0e\xe2u]\xfc\xe8a\xce,\xd9mF\x1d\x86G\xbf\xf1\x8c]I\x98\xd0' , 99 )
    assert 0x0568F40170B3A9D3 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc#Y.\xc9l\x0e\xe2u]\xfc\xe8a\xce,\xd9mF\x1d\x86G\xbf\xf1\x8c]I\x98\xd0\xd6' , 100 )
    assert 0x67BFE9745782210E == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc#Y.\xc9l\x0e\xe2u]\xfc\xe8a\xce,\xd9mF\x1d\x86G\xbf\xf1\x8c]I\x98\xd0\xd6[' , 101 )
    assert 0x86B3CA0CF5031289 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc#Y.\xc9l\x0e\xe2u]\xfc\xe8a\xce,\xd9mF\x1d\x86G\xbf\xf1\x8c]I\x98\xd0\xd6[\xfc' , 102 )
    assert 0xC70A972201B4EFE7 == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc#Y.\xc9l\x0e\xe2u]\xfc\xe8a\xce,\xd9mF\x1d\x86G\xbf\xf1\x8c]I\x98\xd0\xd6[\xfc2' , 103 )
    assert 0x578C26456F59791F == xhash( b'@\xf6i:M\xd7\x80\xe4\x8c1\x9ep\xab\xb5\x17\xa9\x8e\x1b\x97id\x9b\xa6?\xa5T2\xc1d\xfc\xbb\xf2\xe8\xff\x80\x94\xf2<\x97t\xe5\xf3\x89Gp\xf0\xbf8\xe60\xc4\xab\x84LAR\xe4D\x98\xd8\xf8c\x16\xd2\xffe\xdb\xd0\xe9{\r\xcc#Y.\xc9l\x0e\xe2u]\xfc\xe8a\xce,\xd9mF\x1d\x86G\xbf\xf1\x8c]I\x98\xd0\xd6[\xfc2\xfe' , 104 )

########################################################

TEST_ROUNDS = 65536
TEST_SIZE = 262144

sample = open('/dev/urandom', 'rb').read(TEST_SIZE)

t = time.time() ; sum(( 0 * xhash64(sample,len(sample))           for _ in range (TEST_ROUNDS) )) ; print('XHASH64',  time.time() - t)
t = time.time() ; sum(( 0 * len(xhash256(sample))                 for _ in range (TEST_ROUNDS) )) ; print('XHASH256', time.time() - t)
t = time.time() ; sum(( 0 * len(xhash128(sample))                 for _ in range (TEST_ROUNDS) )) ; print('XHASH128', time.time() - t)
t = time.time() ; sum(( 0 * xxhash.xxh64_intdigest(sample)        for _ in range (TEST_ROUNDS) )) ; print('XXH64',    time.time() - t)
t = time.time() ; sum(( 0 * xxhash.xxh128_intdigest(sample)       for _ in range (TEST_ROUNDS) )) ; print('XXH128',   time.time() - t)
t = time.time() ; sum(( 0 * len(hashlib.sha1(sample).digest())    for _ in range (TEST_ROUNDS) )) ; print('SHA1',     time.time() - t)
t = time.time() ; sum(( 0 * len(hashlib.sha256(sample).digest())  for _ in range (TEST_ROUNDS) )) ; print('SHA256',   time.time() - t)
t = time.time() ; sum(( 0 * len(hashlib.sha512(sample).digest())  for _ in range (TEST_ROUNDS) )) ; print('SHA512',   time.time() - t)
t = time.time() ; sum(( 0 * len(hashlib.blake2b(sample).digest()) for _ in range (TEST_ROUNDS) )) ; print('BLAKE2B',  time.time() - t)
