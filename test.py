#!/usr/bin/python

import time
import random
import xxhash
import hashlib
import binascii

import cffi
import xhash

xhash64  = xhash.lib.xhash64

# NOTE: SINGLE THREAD ONLY
_xhash_buff128 = cffi.FFI().new('unsigned char [16]')
_xhash_buff256 = cffi.FFI().new('unsigned char [32]')

def xhash128 (v):
    xhash.lib.xhash128(v, len(v), _xhash_buff128)
    return bytes(_xhash_buff128)

def xhash256 (v):
    xhash.lib.xhash256(v, len(v), _xhash_buff256)
    return bytes(_xhash_buff256)

if True:
    # DEVELOPMENT

    # GENERATE TEST
    for _ in range(64):

        coisa = b''.join((
            random.randint(0, (1 << 64) - 1).to_bytes(byteorder='little', length=8, signed=False),
            random.randint(0, (1 << 64) - 1).to_bytes(byteorder='little', length=8, signed=False),
            random.randint(0, (1 << 64) - 1).to_bytes(byteorder='little', length=8, signed=False),
            random.randint(0, (1 << 64) - 1).to_bytes(byteorder='little', length=8, signed=False),
            random.randint(0, (1 << 64) - 1).to_bytes(byteorder='little', length=8, signed=False),
            random.randint(0, (1 << 64) - 1).to_bytes(byteorder='little', length=8, signed=False),
            random.randint(0, (1 << 64) - 1).to_bytes(byteorder='little', length=8, signed=False),
            random.randint(0, (1 << 64) - 1).to_bytes(byteorder='little', length=8, signed=False),
        )) [:random.randint(1, 64)]

        csum = xhash64(coisa, len(coisa))

        print('assert 0x%016X == xhash(' % csum, coisa, ',', len(coisa), ')')

    # SHOW A SAMPLE
    for i in range(10):
        print(i, '0x%016X' % xhash64(b'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ', 3 + i))
        print(i, '0x%016X' % xhash64(b'0123556789ABCDEFGHIJKLMNOPQRSTUVWXYZ', 3 + i))

    for i in range(10):
        print(i, binascii.hexlify(xhash128(b'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'[:3 + i]), sep=' ', bytes_per_sep=8).upper().decode())
        print(i, binascii.hexlify(xhash128(b'0123556789ABCDEFGHIJKLMNOPQRSTUVWXYZ'[:3 + i]), sep=' ', bytes_per_sep=8).upper().decode())

else:
    # PRODUCTION

    #
    assert xhash64(b'', 0) == 0

    # TEST
    assert 0x8F3BFEA6D19BA826 == xhash( b'\xb2]\x03\xa3\x89\x15\x8d2\x8a\xc6\xe3i@K4\xaf\xdc\x99\xb0\xde\xaa\xe2\x9c\\\xa6/\x9a\xeeo\x8e\x93qsI\x87?\xc3Y\r$' , 40 )
    assert 0x9297B64A7CF4F353 == xhash( b'&*T\xee\xd9pN\xd0\xe5Q\xc1\xd5\xbe\xb5V\xe6\xd5\xe4\x11\x9a\xfb\xc5\x85qv\xa3\xf0\xe9\\\xf6\xcf\xb1\x02\xe9\xe6\x9fCKm\xbe=\x83\xd3\xa3\x193\xc3B\x8b\x1d\xfbD\xfcK\x94\xad\x16' , 57 )
    assert 0x41BF2F69211464B9 == xhash( b'\xc7\x7f\xaa\xf5\x85c\xc7\x8f\xf6\x07\x0b\xa2\x08\x83\xbf\x90\xfe\xda\xec\xc3o6\r\xbb]\xa3\xdc\xb3J\xe9"\xeciJ\xed\x83\x1b\x9d 0' , 40 )
    assert 0x0EE05D67B6361268 == xhash( b'\x18\x90\x03\xd2P\xd2\xca\xe5\x90' , 9 )
    assert 0xFF2F035D11D8F847 == xhash( b'\xc6\xc3\x16K\xd4\xf1\x9a\x8db\x85\xb8Ch\xaa\xaa+(\xa6J&8\x1c.\xdbHLC\xcaC\x07\xdfi\xccD\x08\xf3\xf9}\x8ed&\x9d0_\xba\r\x13\x91\xe0\xc9\xfe\xda\xfa{\xe2<au' , 58 )
    assert 0x13154FBBF457DC2D == xhash( b'r\x97\x11\t\\\xc4\t\x06\xa48Y\x87\x06#\xaa\xfd*\x14]\xad"\xe1' , 22 )
    assert 0x16AD4A27AB6BE13B == xhash( b'\x84\xec' , 2 )
    assert 0x474C7F7CB138B84E == xhash( b'\xaa\xef\xa9\xd1\xf2\x8f:ea\x02/\tO\xca\xe7\x882\x16\xadm\xf9\xa6,\x0fx\xef\x1e\xb3\xe3\xc2' , 30 )
    assert 0x89BEEDE17593A10A == xhash( b'\x86\x04\xce\x8aF\xe3\x07\xdcj' , 9 )
    assert 0x5B00825661E5DB28 == xhash( b'C\x8f:\xe1\xad-\x85\xbf4\x82\x1c\xce\xf4\x97&\xbemk\x14\x12mmh\x8f5d\x9b\xab\xaa=\xfbk\xcc3;\xba\x908\xf9\xb0\x7f\x07\xce(\xad|0Q;(\xe2J\xa6\x96\xeed3?' , 58 )
    assert 0x0927619497932EC3 == xhash( b'P\xbf\xc3C' , 4 )
    assert 0x85C4C94705DD2138 == xhash( b"\xf1.$\xb7\x9d\x10\x1f\xf2\xb2Z\x90b\x7f\x0b@_\x15\xb4kB'-f\xc11f\xe2\xb5\xc6,\xb8f\xd3\xe8R\xec\xb6\xdb2\xafw\xc06\xd78\x86\xa9\xd0I\x8anaw\xddi\x01" , 56 )
    assert 0xB75EA0AD1C541180 == xhash( b'ER\xd1\xc5\xfb\xf1\x82\xa7\xf5\x15\x1a\x16\x9a\xb3\xce{\x90\xedPh\r\xf5\xc9\xcd\xc1/\xeab\x16\xae}^\xb5\xa4\xe7#K\xce\x92\xe5<\x1f\xf9SS\xf4\xb0kT2\xd3\xff\xb5\xc4\xcak47\x9c' , 59 )
    assert 0x2842C33A6347BB11 == xhash( b"\xd3>\x9b\xbe\xdc\x8dd\x8d\x00\xd7\x9d\xe9}\xd0\xcd9\x95\xea\xef\xae^%\xb3\xc3)\xbb4\xf2\xf72\x9f\xe0\xf9\xde\xb6\xff\xb17z\x0fEoL\x05\x8bT\xb96\xb9:2\xb7'JZ\x9e\xc4\x83\xe0\xb4\x16\xe4\x9bG" , 64 )
    assert 0x6003F3D931A52173 == xhash( b'\xad\x99\x90q1\xb4\xa3\x8f\xef\xa0\x08\xd2 \x8a\x8b\xe5' , 16 )
    assert 0xE0155939E46E9276 == xhash( b'\x85\xe7\xb8\xff\x11U\x94\x1a\x00-Yk\xccx\xeb\xd9}\xb1\xe5\xa6%\x84\xb2\xf8\xe20\x0e' , 27 )
    assert 0xDA5AEFFB6295904F == xhash( b'\x1c\xb2\x9cc\xbe&V\x1c\xad+V\x89r\x0c>2\xf9\x8c\x12\x87\x11I{\xe1\xf1\xc8;\xfbIq5C\xb1' , 33 )
    assert 0x60E6A804E56C2D84 == xhash( b'J\xf8A\xc7`\x8f\x0c\x8dr\xc9`\x944\x81\x83\xacpA\xbb)\xf2\xba\x1c\xd7' , 24 )
    assert 0x7B2CC85FA4741FD1 == xhash( b"\x93\x00~R\xa1\xffW\x8bM&T\x96\xba\x81\xee}k\xa1=\xfbRg!Q\x02\xbcG'\xe6\xae\x1f\x7f\xa3PTfQD\xf7\xb3\xb7\x03_\xa5\x84" , 45 )
    assert 0x19C092B7D299E12A == xhash( b'\xd4]QB\x93\x05w\xdc\xb2\xb1\xa4\x82K\xb7' , 14 )
    assert 0x9475110B174CE15E == xhash( b'\xd3}\xa1\x1b\xf1\x0c|%\x8a\x8dX\xe5.\xa3\x96<\x9c\xbf\x01\x13JK\x08\xfe\xc7d\xcc\xde\xe8hI\xa7\x0c\xc4^]R\xaf\xd5\xfc\xd2z!%?z\xba\xe9\x11\xf1\r\xb57s\xc7b\xc0B)\x0e\x9b\x8b\xdc0' , 64 )
    assert 0x9C009C86BBAB6970 == xhash( b'\x93u\xf9\x8f\xb0\xbf\x0b)\xaf\x9a\x7f\x8f#\xa9%D>@\x95(' , 20 )
    assert 0x11B29D16D047413C == xhash( b'\x14\xce\xc5\x7f\x84W]\xc8\x82\xbf\xdd\x85\xd9\xae\xa4\xd7\xc1\xc1\x9b\xec\xdd0Yf' , 24 )
    assert 0xBE27B91FEE60FAFE == xhash( b"\xb8\xc2\x12\xe1}nI,a\x95\x10\\\x9b\x9f\xc9\x85\xc3\x88n\x01v\x11An\xcdx\xa5x7\xfd\xd6\xe1\xcd\x19\x01\xe4K\x10mZz\xbe\x9c\x1a\xcc\x9bb\xf8UT\xebu\x1f'$b@\xe6 \xc4\xdd\xe2\xe3\x1e" , 64 )
    assert 0x3D9F76DD37673757 == xhash( b'\xb6\x81\xba\xcfxM\x7f*\xec\xa5\xc2\xcc\xb4\xf8\x8b\x85\xfe\xc2.\xe50\xfa1D\x00\x9c\xb5\xe3\x0bF\x8bh\xe2\x01\xb0\x86|\xa9O\xfd5\x87e\xda\x1d@N' , 47 )
    assert 0x6D6F7C2335C1CF4E == xhash( b'\xf1V\xa2X\xd2_\xe2Y\xede\xbef\xf9\xca\xbc\xc1;\x8ar\x11mV\xb1\x9c\xe5\xf5?\x1c\x0b"q\xf7\xf2\x06\x03\xffN\xfb\xb50\xcd\x0c\xa2\x1b\xd3\x1erE\x87jx\xe7\x8e\xa2\xbd"' , 56 )
    assert 0xE402F474DDCFE94A == xhash( b'Q\x83\xe6y\xacf\xf3\x84 s\xea\xe8\xda++\xaf\x90\xc2z@\xb4\xc9\x9e}\x1c\xc5\xc0\x8e41\x9d|\x99\xd8\xc5] {\xdd\x96\xa4M\x90\xa9' , 44 )
    assert 0x518A4B6CB69E8462 == xhash( b"=\xedv(\xd7\xb7\x04\x8ac\xff\xab\xd4Wfu\xbd\x919\x96\x88\xdbI\x01\xea^'\x94Rzi\xd6\x17\xa3\xf8R\xc3\xb4" , 37 )
    assert 0x44C4EDAB50ADE0BF == xhash( b'\xfcOI\xd9\xb0\x8fV<\x9c)X^\xaf\x03\xe7\x98Cqa\xde\x88\xa8\xe2\x81\xaa\xf4\xb9\xee\x11\xa4UI\xe0\x8f\xeb>Vr\x8b' , 39 )
    assert 0x70AE86FED2EA37FB == xhash( b"\xa5\x92\xa9\xd2\xedt}4r\x92\x02\x8c\x1d!\xfe\x9f\x0by\xf3\xd6\x16\xda\x15\xee=D\xaf\xfc\xcd\xca\xd5/\xbe\x07a\x0f\x02\x96\xc0\xc1'\xd9\xd0\xa5\xf8J\xb7B\x05\xb5\x10" , 51 )
    assert 0xB12B083B53256908 == xhash( b'h\x83l\x07\x0eG\\\x08\xfbo\x93\x18+9vp^\xee\xc0A\x98\xf3\xb9y\x17\xb3\x1eR\xd0\xf6\x8d\x0b\xd2,\xa4X\xbb\x9d\xd8\xcbV\x08\xdb\xdd\x84\xac{aj\xb0j\x0b\xc66Eb\xc0\x898\xack\xcb\x887' , 64 )
    assert 0xE11C60D11CDDF558 == xhash( b'S\x92`\xba\xd8H\x16\xf9\xfd\x98\x1e}' , 12 )
    assert 0xBA53D687EE798D49 == xhash( b'\xc1\xe2\r\xa3^\xa0h\x83\x95S\xf4\xd5\x17\x9c\xc6\x1f\xe2\xbaTL\x85\x08Y\xd9\xaa\x1b\x1d\xd9p\x1fr\x7f \x0e\xdbU\x95\xe4\xc9X\xa6]\x0412\xa6\r\xa1Y\x0e\x91\r\x1c\xdd\xf61\xbfA\x15' , 59 )
    assert 0xCF02BF410449841D == xhash( b'\x0f\xb8`E\x814uIt\xe9\x04\x94\x95G\xd2\xe5\xb6\x9de\x81\xe0\xcd\xa4=\xde\t\xe3' , 27 )
    assert 0x7EF4B19CDEEAEFD2 == xhash( b'k\x81\x8f\xe4' , 4 )
    assert 0x55D101DBFAD6C403 == xhash( b'\xa0\x1a\x95\xc8\x14\xda\xb7\xbc\xdb\x83\x07>\x91\xc5\xdak\xc7\x99f\xb0%\x17\xff\xce\xaf\x0b\x80v3\xb2\xc1Z\xe1\x99\xc3\xed\xd7\xa9&)8n\xac\x11\x19\xb6\xf5\\\xdf\x92\x82\x93\xe4f\xdc\xf7\x01b' , 58 )
    assert 0x1340B89E3EA0ED6A == xhash( b'\x0f\xa1B\xc9\xff\xd3:\xb6\x9d+\xc6\x11\x8d\x80XD\x8e6%%P\xce\x91\x94\xf6\xb0H\x84\x7f' , 29 )
    assert 0xC9E772617FC5C1B3 == xhash( b'\x9a\x04\xb6\x1c\x92\xbe>Xpay\xad\x16\x1by\x01\xcfI\x14\xd5\xbb%\x8c\xff8\x18I\xf8\x1376\x1f\xfe\xf8\xb6iK\xf8%\xeb\x91\xf5\xbd\xad\xc9\x9aXa\x88\xaa\xd2\x19' , 52 )
    assert 0xC5EB8672DDA4D546 == xhash( b'!\xa9\x96\xab\xadw\x1e\x95\x86\xdc;PD\xfc\xa0Mg\x15\xfd)(}\xb2\xb5\xb3\xde\xca3' , 28 )
    assert 0x29159FD52C458F48 == xhash( b'\xa5{\n\xca\xf4\xfe\xc2\xbb\xfa\xc5?\x95\xb2\xadn\xad\xccJ\xd8G\x90\xa0\xd8\x0f\xe6y2\x8a$' , 29 )
    assert 0xBDA34CC948960B7D == xhash( b'\xa9\xddQ\xdek\xe8\xf26\x84\xfa\xdf!Z\x8f\x12=\xeby\x9f\xe7\xf0)2\x07\x14\x9b0\x8b\x10\x9f\xa6\xda\xc6\x9co.\xe98B\x17ErM' , 43 )
    assert 0x2B284BAD6D1BE7C4 == xhash( b'k\x9b\x95\xcf\x8d\xb0#\x7f\xe9\xfb6\xa8\x93\xda\xac\xa3S\x8c\xdeh\xefb\xa4\xa7\xd5\x1b\xa1\x1e1JfJqt\xdb\x01\xdezN+\x05\x9d\xb6\xca\xcc\xa3\x9ag\xca\x00>Y\xd7\xa2\x99\xe7\xc5W' , 58 )
    assert 0xACAB2D3FDAA96222 == xhash( b'\xb4\xefq\x90\xe2)-\xa1\xa0\xa6j*\x126+P\xc0\xfc\x1cy\xce/\xed\x81\xdb\xf7c+ \xb1\x1e\x9d\xc6R\x96\xc4' , 36 )
    assert 0x9E3EFDD0DBDDEFA5 == xhash( b'w\x10\xfb\xbc\xcd\x19@\xa9\x1a\xde\x0b[\xc4\x08/\xa9\xf1]\x07MC\x8d~\xb5\xdc\x1dMf~\xf1\xb1' , 31 )
    assert 0xA138823727371F88 == xhash( b'n&\xe5\xbf\xa8\xc1\xcd\xab\x06\x0b\xb3~s\x9aA\x12\xf5\x14\\iZ\x93\xe6t\x08%\xd0c\xe3[\x05R\xea\xe5\x01\xa6"~\xcc\xf7\x15\xd3\xe1\x88[f\xb5\x80O\xc8p\xb4\x9f/\xe0\x16\x08' , 57 )
    assert 0xA189E6247440BC0D == xhash( b'\xe0\x8c\xa8A\xadH\x0f\x93}\xce?<\x83[\xf4\xde\xdaG\xc1X\xe1ar\xa8\x0eMx\xa7L\xb9%r\x98\xe9\xb3\x7f\x06=\xed\x83' , 40 )
    assert 0x0F1CC1874A27E4AE == xhash( b' \t\xabOJ\xe2\xfb\xb9\xcd\xdf\x87_e.W\xefy2\\\xadu\x1f\xa5m;\xe3\x11\xe9P\x18z\x8d>\xa4\x1d\x87Y\x1b\x82\xa5|\xaf\xe6|O\x88\xdfjO\x0cx\xd4' , 52 )
    assert 0x2302755F1BC8F3D5 == xhash( b'|#-C\xcf' , 5 )
    assert 0x5C08F7E7AC570BC6 == xhash( b"r=\x15;\x10\xe7\x12\xfe\xb5\x01\xfd\x1ee\x00\x02\x00Y@\x00j\xe6\x9c\xbfd\xa0\x98\xe1\xbe\xe2\x8f\xcdtUy\xa8\xb3\xa1\x80\xdcu\xbc\\\x12>d\x95\xc3UI\xcf\x06\x84'\x08\xff\xd4-\xdcj\x7f\x91\x95\xf2" , 63 )
    assert 0xE8B053A50FB405F3 == xhash( b'\xab\xf9\xc2S~\x8b\xa2n_e\xdaK\x8d\xe5f\xa3%SF\xef\x9e\xed\xa1\x18\xf0iF{\xeb=\x8e\x1di\x82\x1d.N\x83\xc7%\x93\x04\x87/\x1c\x13\x937\x12S' , 50 )
    assert 0x1CA0E7E90637EC99 == xhash( b'gj{\x04m\xe7\xf26\xd2\xd0\x9f\xb9Ob\xb2\xf1B\x16Y\x90\xf2\xca\xf2\x08\xaf\xc6\xfc\x12\x0f\xdc\x8dv2\xd53\x91M\x85\x12\xad\xa7\x02\xf6\x18;\xab\xa6\xfc6A\xcf\xecT\x9e\xcb' , 55 )
    assert 0xA9B8E82747F28216 == xhash( b'n\xb99f\x94\xa6\xe7>C0u\x9du\xc7\x0c\xcfq]yfu\x92\x8c\x1b\xe4\xba6\xdd\xae\xcc7ir$_\xec\x13J\xb2\r.\x85\x80\x1c\x13\xf5\x87' , 47 )
    assert 0x996DCCFB1A6B1344 == xhash( b'wa\x95>=\x0fe\x97\xd6\xe1\x04\x0b9\xb6\xd1s\xaa\x00h\x16\xccO\x18\xfe\x8c\xb0\x00' , 27 )
    assert 0x3EEFEF37B2EEFBF1 == xhash( b'\x1c\x82a\xb7\xf1\xffp\xba\xa6\xec\x0bE\x9fb\x8fM\x0e' , 17 )
    assert 0x1BA66D850F3CDC0D == xhash( b'6\x939\xcd\xcb0\xfe/z8\x17\xbe' , 12 )
    assert 0xE878CEDC454F294E == xhash( b'&\x18\xf9B\xc4\xcd(i|\x08;\xde\xd4\x89\x19\xa5zk{\xcb\x8a\x18e<\xb9\x00~\xbf\x8a\xff' , 30 )
    assert 0xC0DE75B1432EAA42 == xhash( b'\xcdF\xcc%\xbds\xb4,\xce\x02\x91\xae\xb1\x9cwKKW\xe9\xa0VYt\xa0\x87t\xcc\xc5' , 28 )
    assert 0x837A4765422B0479 == xhash( b'D\x08=\xa9&\xf9Bkg\xd2\xe1\x86X\x7f\xcc\x1d\xdf\xd7b4\xa2' , 21 )
    assert 0x7177F3B48CE46EE0 == xhash( b'I\xbc\x1d\xb1`\xd3\xb1\x9b[\x0f\x08\xe2\x16\xe9\xfe!\xef\x12\xf8\xc3\x81\x87`,\xe9\xa6\xaf\x95\xc8t\x07\xdb#\xa1\x1a^\xfak\xd7\r\x85\xc3' , 42 )
    assert 0xC10CDFC821C72AB0 == xhash( b'\xe6$\x1b\xf4p\xeb\xe6\xa9\xf0/\x92\xa4\xbf(@\xa9\x94\x92\xf3\x84\x07\xa5\xbf\xc3&\xf2\n?4\xa8./\xaaz\xc4\xc7\xee\xb1\xabP#L\xd2\xa1V\x02' , 46 )
    assert 0x19198BB7A1D43804 == xhash( b'\xdf\xaa4\xb6\xed\xd5:646-\xf2\xf07\x85\x8f\xf1\xe2\x00\xe7:\xe8*\xeb6\x96\xbfr\x83\xeaJU\xda#\xa0\xa4\x80\xbe\xba\xb5\xcdm\xd9\xbc\xeb\x1b\xba\xd3\xc2\x02\xcd\x06M\xc94' , 55 )
    assert 0xCB6581005B5D9F18 == xhash( b'\xe8$w\x9a\x1a\xea9\x13\x9a\xc7<\x9f\x87f\xb0\xe6_\xd1\xb2o:\xad' , 22 )
    assert 0x2C7892A42A2F740D == xhash( b'\x8c\xccNj\xb6\xe1\xf7\xea<\x81L\xca\xb4\xa3u\xff\x03(q\x9d\x15\xda\xce\xc1\x02\x15M\xf3\x1cL\x03' , 31 )
    assert 0xE996A32F1E87E0F7 == xhash( b'\x1b\x83l\x18\xe0:@\x7f\x8e\xcdd\x98\xf1\x9d\xd8\xe6\xbd\xe9Z\x994\x92\xe4W\x91\xef\x1c4n;\xfc-\x15m\xac\xd2\xa4\x1b\x92\xf0t\xb0\x8e\xadhE@\xb6)\xe5)?\x91\x9e!\xb7Ufc\xd7\xcc\xa8\xa3\xa8' , 64 )

########################################################

TEST_ROUNDS = 65536
TEST_SIZE = 262144

sample = open('/dev/urandom', 'rb').read(TEST_SIZE)

t = time.time() ; sum(( 0 * xhash64(sample,len(sample))           for _ in range (TEST_ROUNDS) )) ; print('XHASH64',  time.time() - t)
t = time.time() ; sum(( 0 * len(xhash256(sample))                 for _ in range (TEST_ROUNDS) )) ; print('XHASH256', time.time() - t)
t = time.time() ; sum(( 0 * len(xhash128(sample))                 for _ in range (TEST_ROUNDS) )) ; print('XHASH128', time.time() - t)
t = time.time() ; sum(( 0 * xxhash.xxh64_intdigest(sample)        for _ in range (TEST_ROUNDS) )) ; print('XXH64',    time.time() - t)
t = time.time() ; sum(( 0 * xxhash.xxh128_intdigest(sample)       for _ in range (TEST_ROUNDS) )) ; print('XXH128',   time.time() - t)
t = time.time() ; sum(( 0 * len(hashlib.sha1(sample).digest())    for _ in range (TEST_ROUNDS) )) ; print('SHA1',     time.time() - t)
t = time.time() ; sum(( 0 * len(hashlib.sha256(sample).digest())  for _ in range (TEST_ROUNDS) )) ; print('SHA256',   time.time() - t)
t = time.time() ; sum(( 0 * len(hashlib.sha512(sample).digest())  for _ in range (TEST_ROUNDS) )) ; print('SHA512',   time.time() - t)
t = time.time() ; sum(( 0 * len(hashlib.blake2b(sample).digest()) for _ in range (TEST_ROUNDS) )) ; print('BLAKE2B',  time.time() - t)
